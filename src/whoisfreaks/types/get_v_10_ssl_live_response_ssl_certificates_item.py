# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .get_v_10_ssl_live_response_ssl_certificates_item_extensions import (
    GetV10SslLiveResponseSslCertificatesItemExtensions,
)
from .get_v_10_ssl_live_response_ssl_certificates_item_issuer import GetV10SslLiveResponseSslCertificatesItemIssuer
from .get_v_10_ssl_live_response_ssl_certificates_item_public_key import (
    GetV10SslLiveResponseSslCertificatesItemPublicKey,
)
from .get_v_10_ssl_live_response_ssl_certificates_item_subject import GetV10SslLiveResponseSslCertificatesItemSubject


class GetV10SslLiveResponseSslCertificatesItem(UniversalBaseModel):
    chain_order: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="chainOrder")] = None
    authentication_type: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="authenticationType")
    ] = None
    validity_start_date: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="validityStartDate")] = (
        None
    )
    validity_end_date: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="validityEndDate")] = None
    serial_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="serialNumber")] = None
    signature_algorithm: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="signatureAlgorithm")
    ] = None
    subject: typing.Optional[GetV10SslLiveResponseSslCertificatesItemSubject] = None
    issuer: typing.Optional[GetV10SslLiveResponseSslCertificatesItemIssuer] = None
    public_key: typing_extensions.Annotated[
        typing.Optional[GetV10SslLiveResponseSslCertificatesItemPublicKey], FieldMetadata(alias="publicKey")
    ] = None
    extensions: typing.Optional[GetV10SslLiveResponseSslCertificatesItemExtensions] = None
    pem_raw: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="pemRaw")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
